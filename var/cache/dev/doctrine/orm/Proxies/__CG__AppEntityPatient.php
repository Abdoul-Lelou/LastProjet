<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Patient extends \App\Entity\Patient implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'nom', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'prenom', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'adresse', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'sexe', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'age', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'matricule', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'tel', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'appointements', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'patientData', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'isVisit', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'medecin'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'nom', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'prenom', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'adresse', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'sexe', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'age', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'matricule', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'tel', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'appointements', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'patientData', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'isVisit', '' . "\0" . 'App\\Entity\\Patient' . "\0" . 'medecin'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Patient $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getNom(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNom', []);

        return parent::getNom();
    }

    /**
     * {@inheritDoc}
     */
    public function setNom(string $nom): \App\Entity\Patient
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNom', [$nom]);

        return parent::setNom($nom);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrenom(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrenom', []);

        return parent::getPrenom();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrenom(string $prenom): \App\Entity\Patient
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrenom', [$prenom]);

        return parent::setPrenom($prenom);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdresse(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdresse', []);

        return parent::getAdresse();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdresse(string $adresse): \App\Entity\Patient
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdresse', [$adresse]);

        return parent::setAdresse($adresse);
    }

    /**
     * {@inheritDoc}
     */
    public function getSexe(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSexe', []);

        return parent::getSexe();
    }

    /**
     * {@inheritDoc}
     */
    public function setSexe(string $sexe): \App\Entity\Patient
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSexe', [$sexe]);

        return parent::setSexe($sexe);
    }

    /**
     * {@inheritDoc}
     */
    public function getAge(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAge', []);

        return parent::getAge();
    }

    /**
     * {@inheritDoc}
     */
    public function setAge(int $age): \App\Entity\Patient
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAge', [$age]);

        return parent::setAge($age);
    }

    /**
     * {@inheritDoc}
     */
    public function getMatricule(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMatricule', []);

        return parent::getMatricule();
    }

    /**
     * {@inheritDoc}
     */
    public function setMatricule(string $matricule): \App\Entity\Patient
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMatricule', [$matricule]);

        return parent::setMatricule($matricule);
    }

    /**
     * {@inheritDoc}
     */
    public function getTel(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTel', []);

        return parent::getTel();
    }

    /**
     * {@inheritDoc}
     */
    public function setTel(int $tel): \App\Entity\Patient
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTel', [$tel]);

        return parent::setTel($tel);
    }

    /**
     * {@inheritDoc}
     */
    public function getAppointements(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAppointements', []);

        return parent::getAppointements();
    }

    /**
     * {@inheritDoc}
     */
    public function addAppointement(\App\Entity\Appointement $appointement): \App\Entity\Patient
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAppointement', [$appointement]);

        return parent::addAppointement($appointement);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAppointement(\App\Entity\Appointement $appointement): \App\Entity\Patient
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAppointement', [$appointement]);

        return parent::removeAppointement($appointement);
    }

    /**
     * {@inheritDoc}
     */
    public function getPatientData(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPatientData', []);

        return parent::getPatientData();
    }

    /**
     * {@inheritDoc}
     */
    public function addPatientData(\App\Entity\PatientData $patientData): \App\Entity\Patient
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPatientData', [$patientData]);

        return parent::addPatientData($patientData);
    }

    /**
     * {@inheritDoc}
     */
    public function removePatientData(\App\Entity\PatientData $patientData): \App\Entity\Patient
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePatientData', [$patientData]);

        return parent::removePatientData($patientData);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsVisit(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsVisit', []);

        return parent::getIsVisit();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsVisit(bool $isVisit): \App\Entity\Patient
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsVisit', [$isVisit]);

        return parent::setIsVisit($isVisit);
    }

    /**
     * {@inheritDoc}
     */
    public function getMedecin(): ?\App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMedecin', []);

        return parent::getMedecin();
    }

    /**
     * {@inheritDoc}
     */
    public function setMedecin(?\App\Entity\User $medecin): \App\Entity\Patient
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMedecin', [$medecin]);

        return parent::setMedecin($medecin);
    }

}
